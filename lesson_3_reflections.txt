When would you want to use a remote repository rather than keeping all your work local?

	when working with others
	also as a backup

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Same to the idea of automatic commits vs manual, I need to control when I pull changes
	as well as what changes to pull so that I can merge when I need where I need 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	forks are clones of peoples' repositories on github that are used to modify someone's code while
	giving credit and keeping his/her code untouched

	clones are copies of a repository without additional information attached and are normally used to clone
	a remote repository to work on locally

	branches are a way to group and label commits to logical units of work in order to keep work organized. 
	 
What is the benefit of having a copy of the last known state of the remote stored locally?

	the benefit is to allow for comparison  with current remote state during push and pull to allow detection
	of conflicts that cannot be resolved by fast-forward merges. local copies of remote changes can be copied without being merged using git fetch

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Coming from svn, I think that using git has a good benefit of having the whole history locally> this makes it
	easier to work and review work while offline. Github's pull request feature is nice to keep master clean and only merge when it is accepted. Previously, peole would have to agree before hand somewhere else before merging changes to master. Github makes this type of collaberation easy and trackable in the same place.
	
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	
	Making changes in a separate branch keeps master production-ready and additions are only added when they are completely ready. That way, other people working on other things don't get affected by others' work-in-progress. The only down side to this is keeping local master up-to-date with remote and constantly merging the updates to master to other local branches.	